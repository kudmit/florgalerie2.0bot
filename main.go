package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"
	"net/http"
	"os"
	"encoding/json"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const AdminID int64 = 246690184

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
type UserInfo struct {
	Language         string
	Bouquet          string
	OrderTime        string
	LastAdminMessage string
	UserName         string // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É
func sendUpdatedInfoToAdmin(bot *tgbotapi.BotAPI, chatID int64, userInfo UserInfo) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	clickableID := fmt.Sprintf("<a href=\"tg://user?id=%d\">%d</a>", chatID, chatID)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	message := fmt.Sprintf(
		"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\nüåç –Ø–∑—ã–∫: %s\nüìù –ò–º—è: %s\nüíê –ë—É–∫–µ—Ç: %s\n‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: %s",
		clickableID,        // –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π ID
		userInfo.Language,  // –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userInfo.UserName,  // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userInfo.Bouquet,   // –ë—É–∫–µ—Ç
		userInfo.OrderTime, // –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	msg := tgbotapi.NewMessage(AdminID, message)
	msg.ParseMode = "HTML" // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
	bot.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
	idMessage := fmt.Sprintf(" %d", chatID)
	bot.Send(tgbotapi.NewMessage(AdminID, idMessage))
}

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func handleAdminMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, userData map[int64]*UserInfo) {
	message := update.Message

	// –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
	if message.Photo != nil {
		parts := strings.SplitN(message.Caption, " ", 2) // –ò—Å–ø–æ–ª—å–∑—É–µ–º Caption –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if len(parts) < 1 {
			bot.Send(tgbotapi.NewMessage(AdminID, "‚ùó –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ."))
			return
		}

		userIDStr := parts[0]
		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(AdminID, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏."))
			return
		}

		photo := message.Photo[len(message.Photo)-1] // –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
		photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FileID(photo.FileID))
		photoMsg.Caption = "üì∏ –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
		_, err = bot.Send(photoMsg)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(AdminID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)))
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if userInfo, exists := userData[userID]; exists {
				userInfo.LastAdminMessage = "üì∏ –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
			}
			bot.Send(tgbotapi.NewMessage(AdminID, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."))
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	text := message.Text
	parts := strings.SplitN(text, " ", 2)
	if len(parts) < 2 {
		bot.Send(tgbotapi.NewMessage(AdminID, "‚ùó –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."))
		return
	}

	userIDStr := parts[0]
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(AdminID, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
		return
	}

	messageText := parts[1]
	if messageText == "" {
		bot.Send(tgbotapi.NewMessage(AdminID, "‚ùó –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π."))
		return
	}

	msg := tgbotapi.NewMessage(userID, fmt.Sprintf("üîî Admin:\n%s", messageText))
	_, err = bot.Send(msg)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(AdminID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %v", err)))
	} else {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		if userInfo, exists := userData[userID]; exists {
			userInfo.LastAdminMessage = messageText
		}
		bot.Send(tgbotapi.NewMessage(AdminID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."))
	}
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
func sendGreeting(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var greeting string
	switch lang {
	case "DEU":
		greeting = "Willkommen in unserem Blumengesch√§ft Florgalerieüíê! Ich bin ein Botü§ñ, der Ihnen bei der Bestellung von Blumenstr√§u√üen hilft, und unsere hilfsbereiten Mitarbeiter an der Rezeption unterst√ºtzen Sie bei untypischen Fragen! Wir gehen sehr pers√∂nlich auf unsere Kunden ein und freuen uns darauf, Ihnen zu helfen, etwas Besonderes zu verfassen!"
	case "EN":
		greeting = "Welcome to our Florgalerieüíê florist shop! I'm a botü§ñ created to help you with the bouquet ordering process, and our helpful receptionists will assist you with atypical questions! We take an extremely personalised approach to our customers and look forward to helping you create something special!"
	case "UK":
		greeting = "–í—ñ—Ç–∞—î–º–æ –í–∞—Å —É –Ω–∞—à–æ–º—É —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ Florgalerieüíê! –Ø –±–æ—Çü§ñ, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –í–∞–º –∑ –ø—Ä–æ—Ü–µ—Å–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–∫–µ—Ç–∞, –∞ –Ω–∞—à—ñ —á—É–π–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –í–∞–º –∑ –Ω–µ—Ç–∏–ø–æ–≤–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏! –ú–∏ –¥–æ—Ç—Ä–∏–º—É—î–º–æ—Å—è –≤–∏–∫–ª—é—á–Ω–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É –¥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –±—É–¥–µ–º–æ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ!"
	case "RU":
		greeting = "¬´–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ Florgalerieüíê! –Ø –±–æ—Çü§ñ, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –í–∞–º —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞, –∞ –Ω–∞—à–∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥—É—Ç –í–∞–º —Å –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! –ú—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –í–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ!"
	}

	msg := tgbotapi.NewMessage(chatID, greeting)
	bot.Send(msg)
}

func askUserName(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message, anonymousButton string
	switch lang {
	case "DEU":
		message = "Wie k√∂nnen wir Sie ansprechen?"
		anonymousButton = "Anonym bleiben"
	case "EN":
		message = "How should we address you?"
		anonymousButton = "Stay anonymous"
	case "UK":
		message = "–Ø–∫ –º–∏ –º–æ–∂–µ–º–æ –¥–æ –í–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?"
		anonymousButton = "–ó–∞–ª–∏—à–∏—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º"
	case "RU":
		message = "–ö–∞–∫ –º—ã –º–æ–∂–µ–º –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
		anonymousButton = "–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(anonymousButton),
		),
	)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –±—É–∫–µ—Ç–∞
func sendBouquetRequest(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Bitte beschreiben Sie den Strau√ü, den Sie kreieren m√∂chten. Anzahl der Blumen, Farbschema des Strau√ües, ungef√§hres verf√ºgbares Budget. üòä (Bitte senden Sie alle oben genannten Informationen in einer Nachricht)"
	case "EN":
		message = "‚ÄòPlease describe the bouquet you would like to create. Number of flowers, colour scheme of the bouquet, approximate available budget. üòä (Please send all of the above information in one message)"
	case "UK":
		message = "–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –±—É–∫–µ—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± —Å—Ç–≤–æ—Ä–∏—Ç–∏. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤—ñ—Ç—ñ–≤, –∫–æ–ª—å–æ—Ä–æ–≤–∞ –≥–∞–º–∞ –±—É–∫–µ—Ç–∞, –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π –Ω–∞—è–≤–Ω–∏–π –±—é–¥–∂–µ—Ç. üòä (–í—Å—é –∑–∞–∑–Ω–∞—á–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º)"
	case "RU":
		message = "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤, —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –±—É–∫–µ—Ç–∞, –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∏–º–µ—é—â–∏–π—Å—è –±—é–¥–∂–µ—Ç. üòä (–í—Å—é —É–∫–∞–∑–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
	}

	if message == "" {
        log.Printf("Error: Bouquet request message is empty for language: %s", lang)
        return
    }

    log.Printf("Sending bouquet request: %s", message)
    msg := tgbotapi.NewMessage(chatID, message)
    if _, err := bot.Send(msg); err != nil {
        log.Printf("Failed to send bouquet request: %v", err)
    }
}

// –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
func sendSchedule(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var schedule string
	switch lang {
	case "DEU":
		schedule = "Arbeitszeiten:\nMontag-Freitag: 9:00 - 21:00\nSamstag: 8:00 - 19:00\nSonntag: 9:00 - 15:00"
	case "EN":
		schedule = "Working hours:\nMonday-Friday: 9:00 - 21:00\nSaturday: 8:00 - 19:00\nSunday: 9:00 - 15:00"
	case "UK":
		schedule = "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:\n–ü–æ–Ω–µ–¥—ñ–ª–æ–∫-–ü‚Äô—è—Ç–Ω–∏—Ü—è: 9:00 - 21:00\n–°—É–±–æ—Ç–∞: 8:00 - 19:00\n–ù–µ–¥—ñ–ª—è: 9:00 - 15:00"
	case "RU":
		schedule = "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 21:00\n–°—É–±–±–æ—Ç–∞: 8:00 - 19:00\n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 9:00 - 15:00"
	}
	msg := tgbotapi.NewMessage(chatID, schedule)
	bot.Send(msg)
}

// –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
func sendOrderTimeRequest(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Bitte geben Sie das Datum und die Uhrzeit Ihrer Buchung im Format 'TT.MM.JJJJ HH:MM' ein. (z.B. 31.12.2024 15:30)."
	case "EN":
		message = "Please enter the date and time of your order in the format 'DD.MM.YYYY HH:MM' (e.g., 31.12.2024 15:30)."
	case "UK":
		message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —ñ —á–∞—Å –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 31.12.2024 15:30)."
	case "RU":
		message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:30)."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
func isWithinWorkingHours(t time.Time) bool {
	weekday := t.Weekday()
	hour := t.Hour()
	switch weekday {
	case time.Monday, time.Tuesday, time.Wednesday, time.Thursday, time.Friday:
		return hour >= 9 && hour < 21
	case time.Saturday:
		return hour >= 8 && hour < 19
	case time.Sunday:
		return hour >= 9 && hour < 15
	default:
		return false
	}
}

// –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç
func sendStoreClosedOptions(bot *tgbotapi.BotAPI, chatID int64, lang string, selectedTime time.Time) {
	loc := selectedTime.Location()
	nextDay := selectedTime.AddDate(0, 0, 1)
	nextDayMorning := time.Date(nextDay.Year(), nextDay.Month(), nextDay.Day(), 9, 0, 0, 0, loc)

	var message, tryAgainButton, nextDayButton string
	switch lang {
	case "DEU":
		message = "Das Gesch√§ft ist zu dieser Zeit geschlossen. W√§hlen Sie eine Option:"
		tryAgainButton = "Neue Zeit eingeben"
		nextDayButton = fmt.Sprintf("Am %02d.%02d um %02d:%02d erhalten", nextDayMorning.Day(), nextDayMorning.Month(), 9, 0)
	case "EN":
		message = "The store is closed at this time. Choose an option:"
		tryAgainButton = "Enter a new time"
		nextDayButton = fmt.Sprintf("Receive on %02d.%02d at %02d:%02d", nextDayMorning.Day(), nextDayMorning.Month(), 9, 0)
	case "UK":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞—á–∏–Ω–µ–Ω–∏–π —É —Ü–µ–π —á–∞—Å. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
		tryAgainButton = "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Å"
		nextDayButton = fmt.Sprintf("–û—Ç—Ä–∏–º–∞—Ç–∏ %02d.%02d –æ %02d:%02d", nextDayMorning.Day(), nextDayMorning.Month(), 9, 0)
	case "RU":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
		tryAgainButton = "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"
		nextDayButton = fmt.Sprintf("–ü–æ–ª—É—á–∏—Ç—å %02d.%02d –≤ %02d:%02d", nextDayMorning.Day(), nextDayMorning.Month(), 9, 0)
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(tryAgainButton),
			tgbotapi.NewKeyboardButton(nextDayButton),
		),
	)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
func sendInvalidTimeMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	loc, _ := time.LoadLocation("Europe/Vienna")
	currentTime := time.Now().In(loc)

	var message string
	switch lang {
	case "DEU":
		message = fmt.Sprintf("Sie haben die Uhrzeit falsch eingegeben, bitte korrigieren Sie sie. Aktuelle Uhrzeit: %s. Bitte geben Sie die Zeit erneut ein.", currentTime.Format("02.01.2006 15:04"))
	case "EN":
		message = fmt.Sprintf("You have entered the time incorrectly, please correct it. Present time: %s. Please try again.", currentTime.Format("02.01.2006 15:04"))
	case "UK":
		message = fmt.Sprintf("–í–∏ –≤–≤–µ–ª–∏ —á–∞—Å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –π–æ–≥–æ. –¢–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —á–∞—Å: %s. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", currentTime.Format("02.01.2006 15:04"))
	case "RU":
		message = fmt.Sprintf("–í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è: %s. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", currentTime.Format("02.01.2006 15:04"))
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"
func handleNextDaySelection(bot *tgbotapi.BotAPI, chatID int64, lang string, userInfo *UserInfo) {
	loc, _ := time.LoadLocation("Europe/Vienna")
	nextDay := time.Now().In(loc).Add(24 * time.Hour)
	nextDayMorning := time.Date(nextDay.Year(), nextDay.Month(), nextDay.Day(), 9, 0, 0, 0, loc)

	userInfo.OrderTime = nextDayMorning.Format("02.01.2006 15:04")
	sendUpdatedInfoToAdmin(bot, chatID, *userInfo)

	var successMessage string
	switch lang {
	case "DEU":
		successMessage = fmt.Sprintf("Ihre Bestellzeit wurde gespeichert: %02d.%02d um 09:00!", nextDay.Day(), nextDay.Month())
	case "EN":
		successMessage = fmt.Sprintf("Your order time has been saved: %02d.%02d at 09:00!", nextDay.Day(), nextDay.Month())
	case "UK":
		successMessage = fmt.Sprintf("–í–∞—à —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: %02d.%02d –æ 09:00!", nextDay.Day(), nextDay.Month())
	case "RU":
		successMessage = fmt.Sprintf("–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %02d.%02d –≤ 09:00!", nextDay.Day(), nextDay.Month())
	}

	msg := tgbotapi.NewMessage(chatID, successMessage)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
func handleOrderTime(bot *tgbotapi.BotAPI, chatID int64, input string, lang string, userInfo *UserInfo) {
	loc, _ := time.LoadLocation("Europe/Vienna")
	currentTime := time.Now().In(loc)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ"
	if strings.Contains(input, "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è") || strings.Contains(input, "Enter a new time") ||
		strings.Contains(input, "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Å") || strings.Contains(input, "Neue Zeit eingeben") {
		sendOrderTimeRequest(bot, chatID, lang) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"
	if strings.Contains(input, "–ü–æ–ª—É—á–∏—Ç—å") || strings.Contains(input, "Receive") ||
		strings.Contains(input, "–û—Ç—Ä–∏–º–∞—Ç–∏") || strings.Contains(input, "Erhalten") {
		nextDay := currentTime.AddDate(0, 0, 1)
		nextDayMorning := time.Date(nextDay.Year(), nextDay.Month(), nextDay.Day(), 9, 0, 0, 0, loc)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è 
		userInfo.OrderTime = nextDayMorning.Format("02.01.2006 15:04")
		sendUpdatedInfoToAdmin(bot, chatID, *userInfo)

		// –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
		var successMessage string
		switch lang {
		case "DEU":
			successMessage = fmt.Sprintf("Ihre Bestellzeit wurde gespeichert: %02d.%02d um 09:00!", nextDay.Day(), nextDay.Month())
		case "EN":
			successMessage = fmt.Sprintf("Your order time has been saved: %02d.%02d at 09:00!", nextDay.Day(), nextDay.Month())
		case "UK":
			successMessage = fmt.Sprintf("–í–∞—à —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: %02d.%02d –æ 09:00!", nextDay.Day(), nextDay.Month())
		case "RU":
			successMessage = fmt.Sprintf("–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %02d.%02d –≤ 09:00!", nextDay.Day(), nextDay.Month())
		}
		msg := tgbotapi.NewMessage(chatID, successMessage)
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		bot.Send(msg)

		//–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–∫–∞–∑
		sendAdminNotification(bot, chatID, lang)
		return

	}
	parsedTime, err := time.ParseInLocation("02.01.2006 15:04", input, loc)
	if err != nil || parsedTime.Before(currentTime) {
		sendInvalidTimeMessage(bot, chatID, lang)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	if !isWithinWorkingHours(parsedTime) {
		sendStoreClosedOptions(bot, chatID, lang, parsedTime)
		return
	}

	// –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
	userInfo.OrderTime = parsedTime.Format("02.01.2006 15:04")
	sendUpdatedInfoToAdmin(bot, chatID, *userInfo)

	// –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
	var successMessage string
	switch lang {
	case "DEU":
		successMessage = "Ihre Bestellzeit wurde gespeichert!"
	case "EN":
		successMessage = "Your order time has been saved!"
	case "UK":
		successMessage = "–í–∞—à —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"
	case "RU":
		successMessage = "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
	}
	msg := tgbotapi.NewMessage(chatID, successMessage)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	bot.Send(msg)

	//–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–∫–∞–∑
	sendAdminNotification(bot, chatID, lang)
}
func sendAdminNotification(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Vielen Dank f√ºr Ihre Bestellung und die Wahl von FlorgalerieüòÑ! Der Administrator hat Ihre Bestellung erhalten und <b><i>teilt Ihnen den Preis</i></b> f√ºr den von Ihnen gew√§hlten Strau√ü mit. Wir pr√ºfen die Verf√ºgbarkeit der ausgew√§hlten Blumen und andere Details der Bestellung. Um einen neuen Auftrag zu erstellen, schreiben Sie '/start'."
	case "EN":
		message = "Thank you for ordering and choosing FlorgalerieüòÑ! The administrator has received your order and <b><i>tell you the price</i></b> of the bouquet you've chosen. We check the availability of the selected flowers and other details of the order. To create a new order, write '/start'."
	case "UK":
		message = "–î—è–∫—É—é –í–∞–º –∑–∞ –∑—Ä–æ–±–ª–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –≤–∏–±—ñ—Ä FlorgalerieüòÑ! –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ <b><i>–ø—ñ–¥–∫–∞–∂–µ –≤–∞–º —Ü—ñ–Ω—É</i></b> –æ–±—Ä–∞–Ω–æ–≥–æ –í–∞–º–∏ –±—É–∫–µ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±—Ä–∞–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '/start'."
	case "RU":
		message = "–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –≤—ã–±–æ—Ä FlorgalerieüòÑ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –í–∞—à –∑–∞–∫–∞–∑ –∏ <b><i>–ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–∞–º —Ü–µ–Ω—É</i></b> –≤—ã–±—Ä–∞–Ω–æ–≥–æ –í–∞–º–∏ –±—É–∫–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ—á–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '/start'."

	}
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "HTML"
	bot.Send(msg)

}
var userData = make(map[int64]*UserInfo)

func main() {
	bot, err := tgbotapi.NewBotAPI("7605031210:AAGTiIboCT3mxxLO6egJ3Zhkr8LAVcdu6yo")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
	domain := "https://florgalerie2bot.onrender.com" 
	webhookURL := domain + "/" + bot.Token

	webhookConfig, err := tgbotapi.NewWebhook(webhookURL)
	if err != nil {
		log.Fatalf("Error creating webhook: %v", err)
	}

	if _, err := bot.Request(webhookConfig); err != nil {
		log.Fatalf("Failed to set webhook: %v", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è Webhook
	http.HandleFunc("/"+bot.Token, func(w http.ResponseWriter, r *http.Request) {
		var update tgbotapi.Update
		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			log.Printf("Error decoding update: %v", err)
			http.Error(w, "Bad request", http.StatusBadRequest)
			return
		}
		processUpdate(bot, update) 
		w.WriteHeader(http.StatusOK)
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ healthcheck
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	// –°—Ç–∞—Ä—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" 
	}
	log.Printf("Starting server on port %s...", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func processUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
    if update.Message == nil {
        return
    }

    chatID := update.Message.Chat.ID
    text := update.Message.Text

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if _, exists := userData[chatID]; !exists {
        userData[chatID] = &UserInfo{}
    }
    userInfo := userData[chatID]

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if chatID == AdminID {
        handleAdminMessage(bot, update, userData)
        return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if update.Message.Photo != nil {
        photo := update.Message.Photo[len(update.Message.Photo)-1]
        adminMessage := fmt.Sprintf("üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d):", chatID)
        bot.Send(tgbotapi.NewMessage(AdminID, adminMessage))
        photoMsg := tgbotapi.NewPhoto(AdminID, tgbotapi.FileID(photo.FileID))
        bot.Send(photoMsg)
        return
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    switch {
    case text == "/start":
        msg := tgbotapi.NewMessage(chatID, "Please select your language:")
        msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("DEU"),
                tgbotapi.NewKeyboardButton("EN"),
                tgbotapi.NewKeyboardButton("UK"),
                tgbotapi.NewKeyboardButton("RU"),
            ),
        )
        bot.Send(msg)

    case text == "DEU" || text == "EN" || text == "UK" || text == "RU":
        userInfo.Language = text
        sendGreeting(bot, chatID, text)
        askUserName(bot, chatID, text)

    case userInfo.UserName == "":
        if strings.Contains(text, "–û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º") || strings.Contains(text, "Stay anonymous") ||
            strings.Contains(text, "–ó–∞–ª–∏—à–∏—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º") || strings.Contains(text, "Anonym bleiben") {

            userInfo.UserName = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            var anonymousMessage string
            switch userInfo.Language {
            case "DEU":
                anonymousMessage = "Sie haben entschieden, anonym zu bleiben."
            case "EN":
                anonymousMessage = "You decided to stay anonymous."
            case "UK":
                anonymousMessage = "–í–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–º."
            case "RU":
                anonymousMessage = "–í—ã —Ä–µ—à–∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º."
            default:
                anonymousMessage = "You decided to stay anonymous."
            }

            msg := tgbotapi.NewMessage(chatID, anonymousMessage)
            msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
            if _, err := bot.Send(msg); err != nil {
                log.Printf("Failed to send anonymous message: %v", err)
                return
            }

            log.Printf("User chose to stay anonymous. Sending bouquet request...")
            sendBouquetRequest(bot, chatID, userInfo.Language)
        } else {
            userInfo.UserName = text

            var greeting string
            switch userInfo.Language {
            case "DEU":
                greeting = fmt.Sprintf("Freut mich, Sie kennenzulernen, %s!", userInfo.UserName)
            case "EN":
                greeting = fmt.Sprintf("Nice to meet you, %s!", userInfo.UserName)
            case "UK":
                greeting = fmt.Sprintf("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è, %s!", userInfo.UserName)
            case "RU":
                greeting = fmt.Sprintf("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, %s!", userInfo.UserName)
            default:
                greeting = fmt.Sprintf("Nice to meet you, %s!")
            }

            msg := tgbotapi.NewMessage(chatID, greeting)
            msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
            if _, err := bot.Send(msg); err != nil {
                log.Printf("Failed to send greeting message: %v", err)
                return
            }

            log.Printf("User provided name: %s. Sending bouquet request...", userInfo.UserName)
            sendBouquetRequest(bot, chatID, userInfo.Language)
        }

    case userInfo.Bouquet == "":
        userInfo.Bouquet = text
        sendOrderTimeRequest(bot, chatID, userInfo.Language)

    case userInfo.OrderTime == "":
        handleOrderTime(bot, chatID, text, userInfo.Language, userInfo)

    case userInfo.OrderTime != "":
        adminMessage := fmt.Sprintf(
            "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d:\n\nüìù –ò–º—è: %s\n\nüó®Ô∏è –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç:\n%s\n\nüìù –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d):\n%s",
            chatID, userInfo.UserName, userInfo.LastAdminMessage, chatID, text,
        )
        bot.Send(tgbotapi.NewMessage(AdminID, adminMessage))
    }
}
